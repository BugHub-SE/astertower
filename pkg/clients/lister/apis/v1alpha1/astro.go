// astertower
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kasterism/astertower/pkg/apis/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AstroLister helps list Astros.
// All objects returned here must be treated as read-only.
type AstroLister interface {
	// List lists all Astros in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Astro, err error)
	// Astros returns an object that can list and get Astros.
	Astros(namespace string) AstroNamespaceLister
	AstroListerExpansion
}

// astroLister implements the AstroLister interface.
type astroLister struct {
	indexer cache.Indexer
}

// NewAstroLister returns a new AstroLister.
func NewAstroLister(indexer cache.Indexer) AstroLister {
	return &astroLister{indexer: indexer}
}

// List lists all Astros in the indexer.
func (s *astroLister) List(selector labels.Selector) (ret []*v1alpha1.Astro, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Astro))
	})
	return ret, err
}

// Astros returns an object that can list and get Astros.
func (s *astroLister) Astros(namespace string) AstroNamespaceLister {
	return astroNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AstroNamespaceLister helps list and get Astros.
// All objects returned here must be treated as read-only.
type AstroNamespaceLister interface {
	// List lists all Astros in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Astro, err error)
	// Get retrieves the Astro from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Astro, error)
	AstroNamespaceListerExpansion
}

// astroNamespaceLister implements the AstroNamespaceLister
// interface.
type astroNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Astros in the indexer for a given namespace.
func (s astroNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Astro, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Astro))
	})
	return ret, err
}

// Get retrieves the Astro from the indexer for a given namespace and name.
func (s astroNamespaceLister) Get(name string) (*v1alpha1.Astro, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("astro"), name)
	}
	return obj.(*v1alpha1.Astro), nil
}
